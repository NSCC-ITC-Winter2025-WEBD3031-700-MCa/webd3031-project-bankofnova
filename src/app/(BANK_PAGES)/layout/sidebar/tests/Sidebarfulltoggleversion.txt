"use client";

import { Box, Drawer, IconButton, AppBar, Toolbar, Typography } from "@mui/material";
import SidebarItems from './SidebarItems';
// import { SidebarProfile } from './SidebarProfile';
import MenuIcon from "@mui/icons-material/Menu";
import { Sidebar, Logo } from 'react-mui-sidebar';
import Profile from "../header/Profile";
import MenuOutlinedIcon from "@mui/icons-material/MenuOutlined"; // Closed menu icon
import MenuOpenOutlinedIcon from "@mui/icons-material/MenuOpenOutlined"; // Open menu icon


import Link from 'next/link';
import { usePathname } from 'next/navigation';
import { useSession } from 'next-auth/react';
import { useEffect, useState } from 'react';

const HEADER_HEIGHT = 64; // Adjust based on your design
const SIDEBAR_WIDTH = 200; // Sidebar width when open
const SIDEBAR_HEIGHT = 270;

interface ItemType {
  isMobileSidebarOpen: boolean;
  onSidebarClose: (event: React.MouseEvent<HTMLElement>) => void;
  isSidebarOpen: boolean;
  onMobileSidebarToggle: () => void; // Add this for toggle functionality
}

const LogoWithHover = () => (
  <Link href="/" passHref>
    <Box
      sx={{
        '&:hover': {
          opacity: 0.8, // Change opacity on hover for effect
        },
        display: 'flex',
        justifyContent: 'center', // Center the logo horizontally
        alignItems: 'center', // Center the logo vertically
        width: '100%', // Make sure it takes up full width
      }}
    >
      <Logo img="/images/logos/dark-logo3.svg" />
    </Box>
  </Link>
);

const MSidebar = ({
  isSidebarOpen,
}: ItemType) => {
  const { data: session, status } = useSession();
  const pathname = usePathname();

  // Always call the hooks in the same order, even if the session is still loading
  const [mdUp, setLgUp] = useState(false);
  const [isTemporary, setIsTemporary] = useState(false); // Determines behavior based on screen size
  const [isSidebarToggled, setIsSidebarToggled] = useState(isSidebarOpen); // New state for toggle

  const toggleSidebar = () => {
    setIsSidebarToggled((prev) => !prev); // Toggle the sidebar state
  };

  useEffect(() => {
    if (typeof window !== 'undefined') {
      const mediaQuery = window.matchMedia('(min-width: 1200px)');
      setLgUp(mediaQuery.matches);
  
      const handleResize = () => setLgUp(mediaQuery.matches);
      mediaQuery.addEventListener('change', handleResize);
  
      return () => mediaQuery.removeEventListener('change', handleResize);
    }
  }, []);

  const isSpecialPage = ['/', '/login'].includes(pathname || '');

  // Check if the page is special and return null if true to avoid rendering the sidebar
  if (isSpecialPage || status !== 'authenticated') {
    return null;
  }

  return (
    <Box sx={{ display: 'flex' }}>
      {/* Header */}
      <AppBar position="fixed" sx={{ zIndex: (theme) => theme.zIndex.drawer + 1, backgroundColor: "transparent", boxShadow: "none" }}>
  <Toolbar sx={{ display: "flex", justifyContent: "space-between", width: "100%" }}>
    {/* Left side: Menu Icon and Logo */}
    <IconButton onClick={toggleSidebar} edge="start">
  {isSidebarToggled ? <MenuOpenOutlinedIcon /> : <MenuOutlinedIcon />}
</IconButton>


    <LogoWithHover />
    
    {/* Right side: Profile */}
    <Box sx={{ display: "flex", alignItems: "center", justifyContent: "flex-end", width: "100%" }}>
      <Profile />
    </Box>
  </Toolbar>
</AppBar>

      {/* Main Content */}
      <Box
        sx={{
          display: 'flex',
          flex: 1,
          marginTop: `${HEADER_HEIGHT}px`,
          marginLeft: isSidebarToggled ? `${SIDEBAR_WIDTH}px` : 0, // Use toggle state for sidebar margin
          transition: 'margin-left 0.3s ease', // Smooth transition for content when sidebar toggles
        }}
      >
        <Drawer
          anchor="left"
          open={isSidebarToggled}
          variant={isTemporary ? 'temporary' : 'persistent'}
          onClose={isTemporary ? toggleSidebar : undefined} // Close on backdrop click for temporary mode
          PaperProps={{
            sx: {
              width: `${SIDEBAR_WIDTH}px`,
              height: `${SIDEBAR_HEIGHT}`,
              boxShadow: 'none',
              borderRight: 'none',
              display: 'flex',
              flexDirection: 'column',
              marginTop: isTemporary ? 0 : `${HEADER_HEIGHT}px`, // Adjust for header only in persistent mode
            },
          }}
        >
          <Box sx={{ height: '100%', mt: '84px' }}>
            <Sidebar width={`${SIDEBAR_WIDTH}px`} collapsewidth="80px" showProfile={false}>
              {/* SidebarItems component handles the actual sidebar content */}
              {/* <SidebarProfile /> */}

             
              <SidebarItems />
            </Sidebar>
          </Box>
        </Drawer>
      </Box>
    </Box>
  );
};

export default MSidebar;
